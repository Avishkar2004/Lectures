REST API's / Restfull api :-

Rules :-

1.Server client architecture (text, image, html, JSON)
2.always respect all http methods
GET POST PUT PATCH DELETE

get /user :- user data read kro and return the data
post /user :- handle new users creation
patch /user :- updat the user

rendering html using these method :-
res.send()
res.render()

TASK:-
REST API :- JSON

GET /users
GET /api/users   :- getting all user data return users as a json


GET /api/users/1 :- get the user with id 1
GET /api/users/2 :- get the user with id 2

this is dynamic path parameters
GET /api/users/:id
:id => variable | Dynamic


POST /api/users  :- Create mew user

PATCH /api/users/:id :- edit the user with id 1

DELETE  /api/users/1 :- delete the users with id 1

===================
Notes :-

REST API Introduction

Representational State Transfer (REST) :-  is an architectural style that defines a set of constraints to be used for creating web services. REST API is a way of accessing web services in a simple and flexible way without having any processing.

REST technology is generally preferred to the more robust Simple Object Access Protocol (SOAP) technology because REST uses less bandwidth, simple and flexible making it more suitable for internet usage. It’s used to fetch or give some information from a web service. All communication done via REST API uses only HTTP request. 

Working: A request is sent from client to server in the form of a web URL as HTTP GET or POST or PUT or DELETE request. After that, a response comes back from the server in the form of a resource which can be anything like HTML, XML, Image, or JSON. But now JSON is the most popular format being used in Web Services. 

In HTTP there are five methods that are commonly used in a REST-based Architecture i.e., POST, GET, PUT, PATCH, and DELETE. These correspond to create, read, update, and delete (or CRUD) operations respectively. There are other methods which are less frequently used like OPTIONS and HEAD.  

GET: The HTTP GET method is used to read (or retrieve) a representation of a resource. In the safe path, GET returns a representation in XML or JSON and an HTTP response code of 200 (OK). In an error case, it most often returns a 404 (NOT FOUND) or 400 (BAD REQUEST). 


POST: The POST verb is most often utilized to create new resources. In particular, it’s used to create subordinate resources. That is, subordinate to some other (e.g. parent) resource. On successful creation, return HTTP status 201, returning a Location header with a link to the newly-created resource with the 201(successfully Created) HTTP status. 

NOTE: POST is neither safe nor idempotent. 

PUT: It is used for updating the capabilities. However, PUT can also be used to create a resource in the case where the resource ID is chosen by the client instead of by the server. In other words, if the PUT is to a URI that contains the value of a non-existent resource ID. On successful update, return 200 (or 204 if not returning any content in the body) from a PUT. If using PUT for create, return HTTP status 201 on successful creation. 

NOTE:- PUT is not safe operation but it’s idempotent.

PATCH: It is used to modify capabilities. The PATCH request only needs to contain the changes to the resource, not the complete resource. This resembles PUT, but the body contains a set of instructions describing how a resource currently residing on the server should be modified to produce a new version. This means that the PATCH body should not just be a modified part of the resource, but in some kind of patch language like JSON Patch or XML Patch. 

NOTE:- PATCH is neither safe nor idempotent. 

DELETE: It is used to delete a resource identified by a URI. On successful deletion, return HTTP status 200 (OK) along with a response body.

Request and Response :-
Now we will see how request and response work for different HTTP methods. Let’s assume we have an API(https://www.geeksforgeeks.org/api/students) for all students data of gfg.

GET: Request for all Students.
     Request
GET:/api/students
POST: Request for Posting/Creating/Inserting Data
Request

POST:/api/students

{“name”:”Raj”}

PUT or PATCH: Request for Updating Data at id=1
Request

PUT or PATCH:/api/students/1

{“name”:”Raj”}

DELETE: Request for Deleting Data of id=1
     Request
DELETE:/api/students/1

RESTful web services are very popular because they are light weight, highly scalable and maintainable and are very commonly used to create APIs for web-based applications.

const express = require("express");
const users = require("./MOCK_DATA.json");
const fs = require("fs");
//this is a instance
const PORT = 8000;
const app = express();

//this is a middleware or plugin
app.use(express.urlencoded({ extended: false }));

//routes
app.get("/", (req, res) => {
  return res.send("Hello");
});
app.get("/users", (req, res) => {
  const html = `
      <ul>
      ${users.map((user) => `<li>${user.first_name}</li>`).join("")}</ul>
      `;
  res.send(html);
});

//get all users data
app.get("/api/users", (req, res) => {
  return res.json(users);
});

app
  .route("/api/users/:id")
  .get((req, res) => {
    const id = Number(req.params.id);
    const user = users.find((user) => user.id === id);
    return res.json(user);
  })
  .patch((req, res) => {
    //Edit user with id
    return res.json({ status: "Pending" });
  })
  .delete((req, res) => {
    //delete user with id
    return res.json({ status: "Pending" });
  });

//making a post req from postman on this
// 1.open postman
// 2.make post  req on :- http://localhost:8000/api/users
// 3.select x-www-form-urlencoded
app.post("/api/users", (req, res) => {
  //jo bhi hum front end se send karte hai na vo is body main available hota hai
  const body = req.body;
  console.log("Body", body); //this will give undefined bcoz you are not usning urlencded:false (this is middle ware or plugin)
  //send data in file
  //id frontend se nhi atta hai
  users.push({ id: users.length + 1, ...body });
  fs.writeFile("./MOCK_DATA.json", JSON.stringify(users), (err, date) => {
    return res.json({ status: "Success", id: users.length });
  });
});

app.listen(PORT, () => {
  console.log("Port is up on 8000");
});
