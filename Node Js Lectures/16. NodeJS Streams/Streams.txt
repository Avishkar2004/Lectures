text file(context ahe 50 mb ki)  ===> express ke andr ek route banana hai jab bhi user uske upr req karega usko vo send krni hai(using fs module)


const express = require("express");
const fs = require("fs");
const status = require("express-status-monitor");
const app = express();
const PORT = 8000;

app.use(status());

//STREAM READ => 400 mb (read) => 400 zip => 400 mb write
app.get("/", (req, res) => {
  fs.readFile("./sample.txt, (err, data) => {
    return res.end(data)
  })
});

app.listen(PORT, () => {
  console.log("Server is up on 8000");
});


http://localhost:8000/status :- you can see status of our code


file(400mb) ==> fs.readFile => data(stored in ram)
this is just one user if i have lots of user then ?
then we can use (stream)


file ko chunk by chunk read karo jaise vo chunk ata rahega waise waise mai res hai vo chunk ko bejta rahunga (pipeline)


const express = require("express");
const fs = require("fs");
const status = require("express-status-monitor");
const app = express();
const PORT = 8000;

app.use(status());
app.get("/", (req, res) => {
  const stream = fs.createReadStream("./sample.txt", "utf-8");
  stream.on("data", (chunk) => res.write(chunk));
  stream.on("end", () => res.end());
});

app.listen(PORT, () => {
  console.log("Server is up on 8000");
});


this will save our storage

Transfer-Encoding : chunked


Notes :-
