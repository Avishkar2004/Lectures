Cookies :- Cookies is domain specific.

- jo server jis domain ke liye Cookies banata hai vo usi ke pass vapis jati hai.


Response :-  
server(token) => res.json({token}) => device file


1.way :-

route accese karna hai :- header: {Token:token}

2.standard way :-

header : {Authorization: "Bearer < token >"}



go to postman send [post] req on http://localhost:8000/user/login
{
    "email" :"avishkarkakde2004@gmail.com",
    "password" :"111"
}

u will get token => get the token => 

send get  req on this => http://localhost:8000 => 
in [Authorization] => go to types => Select **Bearer Token** => paste in token => you will be logged in


you will see Authorization in Header with value [Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NWNhZmE3OTQ5MTU1ZGY1MjY5YzAxYTAiLCJlbWFpbCI6ImF2aXNoa2Fya2FrZGUyMDA0QGdtYWlsLmNvbSIsImlhdCI6MTcwNzk2NjQ0OH0.CYnkCCFjaTFphCn5_DJ5U9ewoT7FY_3YKAvMxajdlyg]

Bearer Authentication :-
-Bearer authentication (also called token authentication) is an HTTP authentication scheme that involves security tokens called bearer tokens. The name “Bearer authentication” can be understood as “give access to the bearer of this token.” The bearer token is a cryptic string, usually generated by the server in response to a login request. The client must send this token in the Authorization header when making requests to protected resources

Authorization: Bearer <token>
Describing Bearer Authentication

Bearer authentication is a security scheme with type: http and scheme: bearer. You first need to define the security scheme under components/securitySchemes, then use the security keyword to apply this scheme to the desired scope – global (as in the example below) or specific operations:

# 1) Define the security scheme type (HTTP bearer)
components:
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value for documentation purposes
# 2) Apply the security globally to all operations
security:
  - bearerAuth: []         # use the same name as above

Optional bearerFormat is an arbitrary string that specifies how the bearer token is formatted. Since bearer tokens are usually generated by the server, bearerFormat is used mainly for documentation purposes, as a hint to the clients. 

paths:
  /something:
    get:
      security:
        - bearerAuth: []

401 Response
You can also define the 401 “Unauthorized” response returned for requests that do not contain a proper bearer token. Since the 401 response will be used by multiple operations, you can define it in the global components/responses section and reference elsewhere via $ref.


paths:
  /something:
    get:
      ...
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        ...
    post:
      ...
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        ...
components:
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid

