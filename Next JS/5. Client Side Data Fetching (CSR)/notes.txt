we have many types of data fetching methods :-

1.server side rendering
2. static side rendering
3. Client side rendering
4. Incremental site generation



1. Client side rendering :-

Client-side rendering (CSR) is the process of rendering web pages on the client using JavaScript. In this approach, the server sends the initial HTML file, but the client then uses JavaScript to dynamically update the page as needed. This allows for more interactive and responsive web pages, as the client can update specific parts of the page without needing to reload the entire page.

Advantages:-
- More dynamic and interactive web applications
- Can provide a smoother and more seamless user experience
- Can reduce the need for additional server requests

disadvantages:-
- Slower initial load times
- Can be less SEO-friendly, as search engines may have difficulty indexing client-rendered content


Working of CSR: When a user requests a page, the server sends the initial HTML file, along with any required JavaScript files. The client then uses JavaScript to update the page as needed, without needing to reload the entire page.

uses: CSR is commonly used for web applications that require a high degree of interactivity, such as social media platforms or e-commerce websites.


================================================================

users/index.js

localhost:3000/user var aaplya la aaple user distil


import { useEffect, useState } from "react";
import Link from "next/link";


const userPage = () => {
    const [users, setUser] = useState()
    console.log(users)
    useEffect(() => {
        async function fetchUser() {
            const data = await fetch("https://dummyjson.com/users")
            setUser(await data.json())
        }
        fetchUser()
    }, [])

    return (
        <div>
            <h1>User</h1>
            {users &&
                users.users &&
                users.users.map(user =>
                    <Link href={`/users/${user.id}`} key={user.id}>
                        <div style={{ padding: 5, justifyContent: "center" }}>{user.firstName}</div></Link>
                )
            }
        </div>
    )
}


export default userPage;


aani user ch naav click kel ki te dynamic ritya [id]/index page madhe jail


[id]/index :-


import { useState, useEffect } from "react";
import { useRouter } from "next/router";
const userInfoPage = () => {
    const [userInfo, setUserInfo] = useState()
    const router = useRouter();
    console.log(userInfo)

    useEffect(() => {
        const id = router.query.id
        async function getUserById(id) {
            const data = await fetch(`https://dummyjson.com/users/${id}`)
            setUserInfo(await data.json())
        }
        getUserById(id)
    }, [router.query.id]);

    return (
        <div>
            <h2>{userInfo?.firstName}</h2>
            <h2>{userInfo?.lastName}</h2>
            <h2>{userInfo?.email}</h2>
        </div>
    )
}

export default userInfoPage;


================================================================
now we are using SWR(state while revalidating) hook :-

we have to install it using "npm i swr"

it has inbuild features :-
-this is light weight
- real time work
- cache build in deta if you fetch data once then it stores data in localstate



users/index.jsx


import Link from "next/link";
import useSWR from "swr";

const fetcher = (...args) => fetch(...args).then((res) => res.json());

const userPage = () => {


    const { data, error, } = useSWR("https://dummyjson.com/users", fetcher)
    console.log(data)
    if (error) {
        return <h1>Error happened</h1>
    }

    if (!data) {
        return <h1>Loading...</h1>
    }

    return (
        <div>
            <h1>User</h1>
            {data.users &&
                data.users &&
                data.users.map(user =>
                    <Link href={`/users/${user.id}`} key={user.id}>
                        <div style={{ padding: 5, justifyContent: "center" }}>{user.firstName}</div></Link>
                )
            }

        </div>
    )
}


export default userPage;

and [id]/index.jsx is same



task :- [id]/index.js madhe "swr" hook use krn ahe