how to create NextJS App Router :-

use :- npx create-next-app@latest

Q.How to run this project :-
Ans :- npm run dev

and by default setting


-app Router build on React Server Components, which supports shared layouts, nested routingm loading states, errror handling and more.

- this is a server Components
================================================================

in Dashboard/page.tsx :-


const DashboardPage = () => {
    console.log("Hello)
  return <h1>Dashboard</h1>;
};

export default DashboardPage;


you will see the resutlt on :-

localhost:3000/dashboard :-  

Dashboard

but you will not able to see Hello in console bcoz this is a server Components


const DashboardPage = () => {
  console.log("hello"); //ith mi jo pan code lihl to code kyu ki ye partuclar code server pe render hota hai
  
  return <h1>Dashboard</h1>;
};

export default DashboardPage;


================================================================
agr muje client pe karna hi hai to mai

"use client";

const DashboardPage = () => {
  console.log("hello"); // hello

  return <h1>Dashboard</h1>;
};

export default DashboardPage;


app dir ke andr jitne bhi compo hai vo server comp hai

================================================================

const DashboardPage = () => {
  async function sayHello() {
    "use server";
    console.log("first");
  }
  return (
    <div>
      <h1>Dashboard</h1>
      <button onClick={sayHello}>Say Hello</button>
    </div>
  );
};

export default DashboardPage;

this function will excute only on server not on client side that' why we used this "use server"
and we have to config out next.config.mjs

/** @type {import('next').NextConfig} */
const nextConfig = {
  experimental: {
    serverActions: true,
  },
};

export default nextConfig;


like this


const DashboardPage = () => {
  async function sayHello(params: any) {
    "use server";
    console.log(params);
  }
  return (
    <div>
      <h1>Dashboard</h1>
      <form action={sayHello}>
        <input type="email" name="email" /> <button>Submit</button>
      </form>{" "}
    </div>
  );
};

export default DashboardPage;


you will get localhost:3000/dashboard :--

FormData {
  [Symbol(state)]: [ { name: 'email', value: 'kishorrupnawar2002@gmail.com' } ]
}


you will get this 


================================================================

layout.txt :- 

/dashboard/layout.tsx :-


const DashboardLayout = ({ children }: { children: React.ReactNode }) => {
  return (
    <div>
      <nav>
        <h3>Navbar</h3>
      </nav>
      <div>{children}</div>
    </div>
  );
};

export default DashboardLayout;



const DashboardPage = () => {
  async function sayHello(params: any) {
    "use server";
    console.log(params);
  }
  return (
    <div>
      <h1>Dashboard</h1>
      <form action={sayHello}>
        <input type="email" name="email" /> <button>Submit</button>
      </form>{" "}
    </div>
  );
};

export default DashboardPage;



you will see on localhost:3000/dashboard :-


Navbar
Dashboard
input field :-        Submit

layout ke adnr you can even have a metadata :-



================================================================

i can even have a loading page error page and many more :-

dashboard/loading :-

export default function LoadingPage() {
  return <div>loading......</div>;
}


then => 

const waitFor = (sec: number) =>
  new Promise((resolve, reject) => setTimeout(resolve, sec * 2000));

const UserPage = async () => {
  await waitFor(2);
  return (
    <div>
      <h1>User page</h1>
    </div>
  );
};

export default UserPage;


then this will show you loading page until setTimeout function terminates

Navbar
Loading...

after 2 sec 

Navbar
User Page

================================================================
Error Page :-


"use client"
export default function ErrorPage() {
    return <div>Error occured in user Page</div>;
  }
  

in page.tsx :--

const waitFor = (sec: number) =>
  new Promise((resolve, reject) => setTimeout(reject, sec * 2000));

const UserPage = async () => {
  await waitFor(2);
  return (
    <div>
      <h1>User page</h1>
    </div>
  );
};

export default UserPage;

You will se on localhost:3000/dashboard/user

2 sec loading then => error occured in user page

================================================================
Paraller Route :-
we can use "@"

i have make changes in user folder to @user

dashboard/@stats :-

const StatsdPage = () => {
  return (
    <div>
      <h2>Stats Page</h2>
    </div>
  );
};

export default StatsdPage;


another folder :-

@stats :-

const waitFor = (sec: number) =>
  new Promise((resolve, reject) => setTimeout(resolve, sec * 2000));

const StatsPage = async () => {
  await waitFor(6);
  return (
    <div>
      <h2>Stats Page</h2>
    </div>
  );
};

export default StatsPage;


dashboard/layout :-


const DashboardLayout = (props : any) => {
  return (
    <div>
      <nav>
        <h3>Navbar</h3>
      </nav>
      <div>{props.children}</div>
      <div>{props.user}</div>
      <div>{props.stats}</div>
    </div>
  );
};

export default DashboardLayout;

This is not working :-


================================================

interception routes :-






ye sab tabhi kaam kargi jab tum project ko versal pe deploy kroge this is called "wender login"


